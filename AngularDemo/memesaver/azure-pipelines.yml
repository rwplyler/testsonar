# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Azure subscription 1 (002adc1d-1fe0-4718-a5ae-20b73d943b4f)'
  
  # Environment name
  environmentName: 'Cinephiliacs'

  # Web app name
  webAppName: 'Cinephiliacs'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      
      # - task: SonarCloudPrepare@1
      #   inputs:
      #     SonarCloud: 'Sonarcloud'
      #     organization: 'rwplyler'
      #     scannerMode: 'CLI'
      #     projectKey: 'rwplyler_cine'
      #     extraProperties: 'sonar.testExecutionReportPaths=reports/ut_report.xml'
          
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Sonarcloud'
          organization: 'rwplyler'
          scannerMode: 'CLI'
          configMode: 'file'

      - script: |
          npm install -g @angular/cli
          npm install
          ng build --prod
          npm run test-ci   
          ls /coverage
          ls     
        displayName: 'npm install, unitTest and build'

      # - script: |
      #     npm install
      #     npx ng build --prod
      #   displayName: 'npm install and build'
        
      # - task: Npm@1
      #   displayName: 'Test Angular'
      #   inputs:
      #     command: custom
      #     customCommand: run test -- --watch=false --code-coverage
      #     workingDir: src/angular8

      # - task: PublishCodeCoverageResults@1
      #   displayName: 'Publish code coverage Angular results'
      #   condition: succeededOrFailed()
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: 'src/coverage/cobertura-coverage.xml'
      #     reportDirectory: src/coverage
      #     failIfCoverageEmpty: true
      # - script: 
      #     npx ng test --browsers ChromeHeadless --no-watch --code-coverage
      #   displayName: ng test

      # - task: PublishTestResults@2
      #   inputs:
      #     testResultsFormat: 'JUnit'
      #     testResultsFiles: '**/TEST-*unit-test-result.xml'
      # - script: ng test --watch=false --codeCoverage=true
      #   displayName: 'Unit Tests'
        
      # - task: PublishTestResults@2
      #   inputs:
      #     testResultsFormat: 'JUnit'
      #     testResultsFiles: '**/TESTS-*.xml'
      #   displayName: 'Publish Test Results'
        
      - task: SonarCloudAnalyze@1
        
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'



      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/my-app'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          replaceExistingArchive: true
          

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          ArtifactName: 'drop'
          publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: 'ubuntu-20.04'
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
     
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              appType: webAppLinux
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip 